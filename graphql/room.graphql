extend type Query @guard {
    rooms(orderBy: [SortOption!]! @orderBy): [Room]! @paginate(defaultCount: 10)
    room(id: ID @eq): Room @find
    roomTypes(orderBy: [SortOption!]! @orderBy): [RoomType]! @all
    roomFacilities(orderBy: [SortOption!]! @orderBy): [RoomFacility]! @all
    favoriteRooms: [Room]!

    searchRoom(
        types: [ID], @rulesForArray(apply: ["exists:room_types,id"])
        seats: Int, @rules(apply: ["integer"])
        facilities: [ID], @rulesForArray(apply: ["exists:room_facilities,id"])
        start: DateTimeOrDate @rules(apply: ["date"])
        end: DateTimeOrDate @rules(apply: ["date", "after:start_date"])
        name: String
    ): [Room!]!
}

type Room {
    id: ID!
    name: String!
    price: Float!
    seats: Int!
    overview: String!
    location: String!
    status: Boolean!
    average_rate: Float!
    rates_count: Int!
    is_favorite: Boolean!
    type: RoomType! @belongsTo
    facilities: [RoomFacility]! @hasMany
    reviews: [Review]! @hasMany
    main_image: Image @morphOne
    images: [Image]! @morphMany
    bookings: [Booking]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
    wifi_ssid: String
    wifi_pass: String
    qr_token: String
    available_at: DateTime
}

type RoomFacility {
    id: ID!
    name: String!
    icon: String
}

type RoomType {
    id: ID!
    name: String!
}

type SearchRoomResponse {
    success: Boolean!
}

extend type Mutation @guard {
    makeRoomFavorite(
        id: ID!, @rules(apply: ["exists:rooms,id"]),
    ): Room
}
