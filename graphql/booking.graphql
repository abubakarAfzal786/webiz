extend type Query @guard {
    bookings: [Booking!]! @paginate(defaultCount: 10)
    booking(id: ID @eq): Booking @find
    roomAttributes(orderBy: [SortOption!]! @orderBy): [RoomAttribute!]! @all
}

type Booking {
    id: ID!
    room_id: Int!
    member_id: Int!
    start_date: DateTimeOrDate!
    end_date: DateTimeOrDate!
    created_at: DateTime!
    updated_at: DateTime!
    price: Float!
    room_attributes: [RoomAttribute] @belongsToMany
    reviews: [Review]! @hasMany
}

extend type Mutation @guard {
    createBooking(
        room_id: ID!, @rules(apply: ["exists:rooms,id"]),
        member_id: ID!, @rules(apply: ["exists:members,id"]),
        start_date: DateTimeOrDate! @rules(apply: ["date", "after:now"])
        end_date: DateTimeOrDate! @rules(apply: ["date", "after:start_date"])
        attributes: [BookingAttribute]
    ): Booking

    updateBooking(
        id: ID! @rules(apply: ["exists:bookings,id"]),
        room_id: ID!, @rules(apply: ["exists:rooms,id"]),
        member_id: ID!, @rules(apply: ["exists:members,id"]),
        start_date: DateTimeOrDate! @rules(apply: ["date", "after:now"])
        end_date: DateTimeOrDate! @rules(apply: ["date", "after:start_date"])
    ): Booking

    deleteBooking(
        id: ID! @rules(apply: ["exists:bookings,id"])
    ): Boolean
}

type RoomAttribute {
    id: ID!
    name: String!
    unit: Int!
    unit_name: String!
    price: Float!
}

input BookingAttribute {
    id: ID! @rules(apply: ["exists:room_attributes,id"]),
    quantity: Int!
}
