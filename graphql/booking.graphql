extend type Query @guard {
    bookings: [Booking]!
    booking(id: ID!): Booking
    roomAttributes(orderBy: [SortOption!]! @orderBy): [RoomAttribute!]! @all
}

type Booking {
    id: ID!
    room_id: Int!
    member_id: Int!
    start_date: DateTimeOrDate!
    end_date: DateTimeOrDate!
    created_at: DateTime!
    updated_at: DateTime!
    price: Float!
    status: Int
    status_name: String
    room_attributes: [RoomAttribute]! @belongsToMany
    reviews: [Review]! @hasMany
    room: Room @belongsTo
    door_key: Int
    logo: Image @belongsTo
    similar_room: Room
}

extend type Mutation @guard {
    createBooking(
        room_id: ID!, @rules(apply: ["exists:rooms,id"]),
        member_id: ID, @rules(apply: ["exists:members,id"]),
        start_date: DateTimeOrDate! @rules(apply: ["date", "after:now"])
        end_date: DateTimeOrDate! @rules(apply: ["date", "after:start_date"])
        attributes: [BookingAttribute]
    ): Booking

    continueBooking(
        id: ID! @rules(apply: ["exists:bookings,id"])
    ): Boolean

    completeBooking(
        id: ID! @rules(apply: ["exists:bookings,id"])
    ): Boolean

    cancelBooking(
        id: ID! @rules(apply: ["exists:bookings,id"])
    ): Boolean

    useLogo(
        booking_id: ID! @rules(apply: ["exists:bookings,id"])
        logo_id: ID! @rules(apply: ["exists:images,id"])
    ): Image

    extendBooking(
        id: ID! @rules(apply: ["exists:bookings,id"])
    ): Boolean
}

type RoomAttribute {
    id: ID!
    name: String!
    unit: Int!
    unit_name: String!
    price: Float!
    pivot: RoomAttributePivot
}

type RoomAttributePivot {
    quantity: Int
}

input BookingAttribute {
    id: ID! @rules(apply: ["exists:room_attributes,id"]),
    quantity: Int!
}
