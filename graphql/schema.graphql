"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime string with format `Y-m-d` or `Y-m-d H:i:s`."
scalar DateTimeOrDate @scalar(class: "App\\GraphQL\\Scalars\\DateTimeOrDate")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    authenticate(email: String!, password: String!): AuthResponse
    authorize: Boolean

    sendVerification(
        phone: String!, @rules(apply: ["exists:members,phone"]),
    ): Boolean
    verify(code: Int!, phone: String!, test: Boolean): VerifyResponse

    me: Member @auth
}

type Mutation {
    signUp(
        name: String!, @rules(apply: ["string", "min:2", "max:191"]),
        email: String!, @rules(apply: ["email", "unique:members"]),
        password: String, @rules(apply: ["string", "min:6", "max:191"]),
        password_confirmation: String, @rules(apply: ["string", "min:2", "max:191", "same:password"]),
    ): VerifyResponse
    updateToken(token: String!): Boolean! @guard
}

type AuthResponse {
    message: String
    token: String
    success: Boolean
    user: Member
}

type VerifyResponse {
    message: String
    token: String
    success: Boolean
    user: Member
}

type MessageAndSuccessResponse {
    message: String
    success: Boolean
}

input SortOption {
    field: String
    order: SortOrder
}

enum SortOrder {
    ASC
    DESC
}

#import image.graphql
#import member.graphql
#import room.graphql
#import review.graphql
#import booking.graphql
#import faq.graphql
#import notifications.graphql
#import team.graphql
#import payments.graphql
#import support_ticket.graphql
#import package.graphql

#import tablet.graphql
